package com.jdbc.day3;

import com.jdbc.utilities.DBUtilities;
import org.junit.Test;

import java.sql.*;

public class JDBCPractice {
    //             oracle is specifically for oracle could be anything like Postgresql
    final String DB_URL = "jdbc:oracle:thin:@54.152.21.73:1521:xe";
    final String DB_USER = "hr";
    final String DB_PASSWORD = "hr";

    @Test
    public void connectToDB() throws Exception{
        /**
         * To connect with a database we call DriverManager
         * Provide DB connection URL, username and password
         * By default, JDBC does auto commit
         */
        Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        /**
         * connection.setAutoCommit(false); --> to disable auto commit
         * if don't commit, we can call rollback function to revert changes
         * if auto commit is disabled, at the end we have to call commit() method to make changes permanently
         * only DML commands can re reverted: INSERT, UPDATE, DELETE
         *
         * statement is used to execute a query
         */
        Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        // insensitive to scroll-->
        // A table of data representing a database result set,
        // which is usually generated by executing a statement that queries the database
        // It pointer will be before first row, we need to call next() method
        // To switch pointer and move it to the first row

        //String query = "SELECT * FROM employees WHERE last_name = "; to use with prepared statement
        ResultSet resultSet = statement.executeQuery("SELECT * FROM employees");
        resultSet.next(); // returns boolean, and moves cursor(pointer)
                          // to the next row in resultSet if it present

        String firstName = resultSet.getString("first_name");
        String lastName = resultSet.getString("last_name");

        // to get the whole row with loop
        resultSet.beforeFirst(); // to move cursor back before first row
        while (resultSet.next()){
            String firstName2 = resultSet.getString("first_name");
            String lastName2 = resultSet.getString("last_name");
            System.out.println(firstName2 + " " + lastName2);
        }
        /*
        either (1) the row count for Sgl Data Manipulating Language (DML) statements
         or (2) 0 for SQL statements that return nothing
         */

//        int resultSet1 = statement.executeUpdate("UPDATE employees SET first_name = 'Ainura', last_name = 'Nora' WHERE employee_id = 99");
//        System.out.println("resultSet1 = " + resultSet1);


       System.out.println(firstName);
       System.out.println(lastName);

        resultSet.close();
        statement.close();
        connection.close();

    }

    /**
     * PreparedStatement helps to easier executed UPDATE statement
     * Good for batch execution
     * @throws Exception
     */
    @Test
    public void preparedStatement() throws Exception {
        Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);

        String query = "SELECT * FROM employees WHERE last_name = ? AND first_name = ?";

        PreparedStatement preparedStatement = connection.prepareStatement(query);

        preparedStatement.setString(1, "King"); // replace ? with a value Nora
        preparedStatement.setString(2, "Steven");// replace second ? with value Ainura

        ResultSet resultSet = preparedStatement.executeQuery();

        while (resultSet.next()){
            System.out.println(resultSet.getString("first_name")+ " " + resultSet.getString("last_name"));

        }

        resultSet.close();
        preparedStatement.close();
        connection.close();

    }

    @Test
    public void setaDataTest() throws SQLException {
        // try with resource will close the connection automatically in the end of test block
        try(Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
        ResultSet resultSet = statement.executeQuery("SELECT * FROM employees")){

            DatabaseMetaData databaseMetaData = connection.getMetaData(); // database properties, not data itself
            ResultSetMetaData metaData = resultSet.getMetaData(); // technical info about actual data, result set properties, not a data itself

            // we can get the entire column with nested loop
          //  metaData.getColumnCount(); // to get how many column in a result set
            while (resultSet.next()){ // outer loop
            for(int  columnIndex = 1;columnIndex<= metaData.getColumnCount(); columnIndex++){
                System.out.print(resultSet.getObject(columnIndex) + " "); // this will go and iterate from column 1 and get the entire column
            }
                System.out.println();

            }
        }

    }

    @Test
    public void dbUtilities(){
        DBUtilities.createConnection(DB_URL, DB_USER, DB_PASSWORD);

        System.out.println(DBUtilities.getQueryResultMap("SELECT * FROM employees"));

        DBUtilities.destroy();

    }

}
